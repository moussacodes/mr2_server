// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @unique @default(cuid()) // Use auto() for auto-incremented IDs if supported
  username         String    @unique
  email            String    @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  verified         Boolean?  @default(false)
  muted            Boolean?  @default(false)
  hashedPassword   String? // Store hashed passwords securely
  refreshToken     String? // Handle refresh tokens securely
  lastLogin        DateTime  @default(now())
  pfp              String?
  bio              String?
  socialLinks      String[]  @default([]) // Array to store social links
  likedThreads     String[]  @default([]) // Arrays to store liked/disliked items
  dislikedThreads  String[]  @default([])
  likedComments    String[]  @default([])
  dislikedComments String[]  @default([])
  roleId           String
  badgeId          String
  role             Role      @relation(fields: [roleId], references: [id])
  badge            Badge?    @relation(fields: [badgeId], references: [id])
  followers        User[]    @relation("Followers")
  following        User[]    @relation("Followers")
  threads          Thread[] // You might consider renaming this to 'authoredThreads'
  comments         Comment[] // You might consider renaming this to 'authoredComments'
  score            Int? // You might want to add more context or documentation for this field
  active           Boolean
}

model Thread {
  id            String    @id @unique @default(cuid()) // Use auto() for auto-incremented IDs if supported
  title         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  content       String
  tags          String[]
  reactionCount Int       @default(0)
  modified      Boolean   @default(false)
  userId        String
  views         Int       @default(0)
  featured      Boolean   @default(false)
  status        String    @default("open") // Corrected typo: 'statues' to 'status'
  comments      Comment[]
  author        User      @relation(fields: [userId], references: [id])
}

model Comment {
  id            String   @id @unique @default(cuid()) // Use auto() for auto-incremented IDs if supported
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  modified      Boolean  @default(false)
  userId        String
  reactionCount Int      @default(0)
  threadId      String
  thread        Thread   @relation(fields: [threadId], references: [id])
  author        User     @relation(fields: [userId], references: [id])
}

model Role {
  id        String   @id @unique @default(cuid()) // Use auto() for auto-incremented IDs if supported
  name      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[] // You might consider renaming this to 'userProfiles'
}

enum UserRole {
  ADMIN
  MODERATOR
  CONTRIBUTOR
  REGULAR_USER
  NEW_USER
  BANNED_USER
  BOT
  COMMUNITY_AMBASSADOR
  MUTED_USER
}

model Badge {
  id        String    @id @unique @default(cuid()) // Use auto() for auto-incremented IDs if supported
  name      UserBadge
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[] // You might consider renaming this to 'userProfiles'
}

enum UserBadge {
  STARTER
  ACTIVE_POSTER
  HELPER
  DAILY_CONTRIBUTOR
  ENGAGER
  VERSATILE_POSTER
  EVENT_ORGANIZER
  BADGE_COLLECTOR
  THREAD_CHAMPION
  FEATURED_THREAD
}
